#!/usr/bin/env bash

# Returns:
# 467..114.. => 467 0 3 114 5 3
# num index length...
function numbersInLine {
  local line=$1
  local start=0
  while [[ $line =~ ^([^0-9]*)([0-9]+) ]]; do
    nPrefix=${#BASH_REMATCH[1]}
    number=${BASH_REMATCH[2]}
    index=$(( $start + $nPrefix ))
    len=${#number}
    start=$(( $start + ${#BASH_REMATCH[0]} ))
    line=${line#"${BASH_REMATCH[0]}"}
    echo $number $index $len
  done
}

# Example:
# 617*.a. => 3 5
function symbolsInLine {
  local line=$1
  local start=0
  while [[ $line =~ ^([0-9.]*)[^0-9.] ]]; do
    nPrefix=${#BASH_REMATCH[1]}
    index=$(( $start + $nPrefix ))
    len=${#number}
    start=$(( $start + ${#BASH_REMATCH[0]} ))
    line=${line#"${BASH_REMATCH[0]}"}
    echo $index
  done
}

function isIndexInRange {
  local rangeStart=$1
  local len=$2;
  local index=$3
  (( index >= rangeStart && index < (rangeStart + len) ))
}

function isRangeAdjacantToSymbols {
  local rangeStart=$1
  local len=$2
  local symbols="$3"
  mapfile -t -d ' ' indices <<< "$symbols"
  for i in ${indices[@]}; do
    if isIndexInRange $rangeStart $len $i; then
      true
      return
    fi
  done
  false
}

# $1: list of indices for symbols
# STDIN: <num1> <index1> <len1>
#        <num2> <index2> <len2>...
function numbersAdjacantToSymbols {
  local symbols="$1"
  while read num index len; do
    if [[ -z $num ]]; then 
      return
    fi
    if isRangeAdjacantToSymbols $(($index-1)) $(($len+2)) "$symbols"; then
      RESULT_NUMBERS+="$num "
      echo Yes! $num is adjacent
    fi
  done
}

read line1;
read line2;
symbols1=$(symbolsInLine "$line1")
symbols2=$(symbolsInLine "$line2")
symbols="$symbols1 $symbols2"
numbers1=$(numbersInLine "$line1")
echo First line symbols $symbols
numbersAdjacantToSymbols "$symbols" <<<"$numbers1"

# Process all the NUMBERS on the middle line as we don't want to count a
# number multiple times.
while read line3; do
  numbers2=$(numbersInLine "$line2")
  symbols3=$(symbolsInLine "$line3")
  symbols="$symbols1 $symbols2 $symbols3"
  numbersAdjacantToSymbols "$symbols" <<<"$numbers2"
  line1="$line2"
  line2="$line3"
  symbols1="$symbols2"
  symbols2="$symbols3"
done

symbols="$symbols1 $symbols2"
numbers2=$(numbersInLine "$line2")
numbersAdjacantToSymbols "$symbols" <<<"$numbers2"

echo numbers $RESULT_NUMBERS
declare -i sum=0
declare -i n
for n in ${RESULT_NUMBERS[@]}; do
  sum+=$n
done
echo sum $sum
